// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Sabs.AccountService.Data.Accounting.Repositories;
using System;

namespace Sabs.AccountService.Migrations
{
    [DbContext(typeof(AccountContext))]
    partial class AccountContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Sabs.AccountService.Data.Accounting.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CloseDate");

                    b.Property<int>("FinancialInstitutionId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("OpenDate");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("FinancialInstitutionId");

                    b.HasIndex("TypeId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Sabs.AccountService.Data.Accounting.Models.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("Sabs.AccountService.Data.Accounting.Models.Balance", b =>
                {
                    b.Property<int>("AccountId");

                    b.Property<DateTime>("CloseDate");

                    b.Property<int>("AccountBalance");

                    b.HasKey("AccountId", "CloseDate");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("Sabs.AccountService.Data.Accounting.Models.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Sabs.AccountService.Data.Accounting.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<int>("Amount");

                    b.Property<bool>("Closed");

                    b.Property<string>("Description");

                    b.Property<DateTime>("TransactionDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Sabs.AccountService.Data.Accounting.Models.Account", b =>
                {
                    b.HasOne("Sabs.AccountService.Data.Accounting.Models.Institution", "FinancialInstitution")
                        .WithMany()
                        .HasForeignKey("FinancialInstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sabs.AccountService.Data.Accounting.Models.AccountType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sabs.AccountService.Data.Accounting.Models.Balance", b =>
                {
                    b.HasOne("Sabs.AccountService.Data.Accounting.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sabs.AccountService.Data.Accounting.Models.Transaction", b =>
                {
                    b.HasOne("Sabs.AccountService.Data.Accounting.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
